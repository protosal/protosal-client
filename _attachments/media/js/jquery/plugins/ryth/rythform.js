/*
 * A jQuery plugin template
 * Basically used as personal reference
 * 
 * Author: Andy Goh (hantu)
 * Website: http://www.andygoh.net
 *
 * Revisions:
 *		0.1		- Initial commit
 * 
 * References:
 *		http://www.learningjquery.com/2007/10/a-plugin-development-pattern
 *		http://docs.jquery.com/Plugins/Authoring
 *
 * Notes:
 *		- Good idea to name your file jquery.pluginName.js
 */
(function($) {

	// replace 'pluginName' with the name of your plugin
    $.fn.rythform = function(options) {
		// plugin default options
        var defaults = {
        };

		// extends defaults with options provided
        if (options) {
			$.extend(defaults, options);
		}

		// iterate over matched elements
        return this.each(function() {
          var options = { 
            beforeSubmit:  showRequest,  // pre-submit callback 
            success:       showResponse  // post-submit callback
        };     
        // showRequest and showResponse are abstracted slightly and can be found further down
        $(this).ajaxForm(options);
                                                
            /*
          $(this).validate({
                                            errorElement: 'div',
                                            submitHandler: function(form) {
                                                // submitHandler runs when the jQuery validate is successful
                                                var options = { 
                                                    beforeSubmit:  showRequest,  // pre-submit callback 
                                                    success:       showResponse  // post-submit callback
                                                };     
                                                // showRequest and showResponse are abstracted slightly and can be found further down
                                                $(form).ajaxSubmit(options);
                                        },
                                        // This function was implemented by us straight into jquery.validate.ryth.js
                                        // We will have to update it manually everytime a new version is released
                                        postvalidate: function() {
                                            // postvalidate runs at every keystroke to watch user input live
                                            // We want to watch for errors generated by jquery.validate and apply qTips to them
                                            $("div.error").each( function() {
                                                
                                                // The error returned by jquery.validate contains the message we want in its title
                                                errortitle = $(this).attr("title");
                                                // The input field that triggered the error is located in the "htmlfor" attribute
                                                fieldname = $(this).attr("htmlfor");
                                                //TODO reference fieldname with form name included so forms don't have the same fields
                                                targetfield = $("[name=" + fieldname + "]");
                                                
                                                // If the JQuery validate div is visible, we need to create a QTip popup
                                                if($(this).css("display") != "none") {
                                                    
                                                    // If there is no pre-existing QTip
                                                    if( $("."+fieldname+"field").length == 0) {
                                                        
                                                        $(targetfield).qtip({
                                                        
                                                            content: {text: errortitle},
                                                            show : {ready:true, when: {event: false}},
                                                            position: {
                                                              adjust: {
                                                                  resize: true,
                                                                  scroll: true
                                                              },
                                                              corner: {
                                                                 target: 'rightMiddle',
                                                                 tooltip: 'leftMiddle'
                                                              }
                                                            },
                                                            style: {
                                                                background: null,
                                                                   color: null,
                                                                   tip: {
                                                                       corner: true,
                                                                       background: null
                                                                   },
                                                                   border: {
                                                                       width: 2,
                                                                       radius: 3
                                                                   },
                                                                   title: {
                                                                       'background': null,
                                                                       'fontWeight': null
                                                                   },
                                                                   classes: {
                                                                       tooltip: 'qtip ui-widget ' + fieldname +'field',
                                                                       tip: 'ui-widget',
                                                                       title: 'ui-widget-header',
                                                                       content: 'ui-widget-content '
                                                                   }

                                                           }
                                                   
                                                       });
                                                    }
                                                    $(targetfield).qtip("disable");
                                                    $(targetfield).qtip("api").updateContent(errortitle, true)
                                                } else {
                                                    // There is no more error
                                                    $(targetfield).qtip("destroy");
                                                }
                                                
                                                //end each loop
                                            })
                                        },
                                    });
                                    **/
        });

    };

	// public functions definition
	$.fn.rythform.functionName = function(foo) {
		return this;
	};

        // pre-submit callback 
        function showRequest(formData, jqForm, options) {
            // Disable submit button while form is submitting
            $("button, .submit, input[type=submit]").button( "option", "disabled", true );
        } 
        
        // Default callback functions for form handler
        form_options = new Array();
        form_options['default'] = {
            success: function() {
                alert('Success not implemented!');
            },
            fail: function() {
                alert('Fail not implemented!');
            },
            fatal: function() {
                alert('Fatal not implemented!');
            },
        };

        function showResponse(responseText, statusText, xhr, jqForm)  { 
            var obj;
            try {
                obj = jQuery.parseJSON(responseText);
            } catch( err ) {
                console.log(err);
                obj = null;
            }
            
            if( obj != null ){
                var formId = $(jqForm).attr("id");
                var data = obj.data;
                var formCallback = $.extend( {}, form_options['default'], form_options[formId] );
                if( obj.success ) {
                    console.log( data );
                    formCallback.success( data );
                } else {
                    if( obj.data.fatal ) {
                        formCallback.fatal( data );
                    } else {
                        formCallback.fail( data );
                    }
                }
            } else {
                alert(responseText);
            }
            
            // Re-enable submit button
            $("button, .submit, input[type=submit]").button( "option", "disabled", false );
        }

})(jQuery);
